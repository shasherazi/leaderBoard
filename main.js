(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([n.id,"html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n  background-color: #f3efe0;\n  color: #222;\n  height: 100%;\n}\n\n.leaderboard-heading {\n  text-align: center;\n  margin: 0;\n  padding-top: 30px;\n}\n\n.leaderboard {\n  margin: 50px;\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.recent-heading-and-button {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.recent-heading {\n  margin-right: 50px;\n}\n\n.refresh-button {\n  cursor: pointer;\n}\n\n.recent-scores-list {\n  list-style: none;\n  border: 1px solid #a27b5c;\n  width: 100%;\n  padding: 0;\n}\n\n.recent-score {\n  padding: 10px;\n}\n\n.recent-score:nth-child(even) {\n  background-color: #22a39f;\n}\n\n.form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 50px;\n}\n\ninput {\n  margin: 5px;\n  padding: 10px;\n  font-size: 16px;\n  border: none;\n  background-color: #e6ddb3;\n  color: #222;\n  border-bottom: 1px solid #fff0;\n}\n\ninput:focus {\n  outline: none;\n  border-bottom: 1px solid #22a39f;\n}\n\nbutton {\n  padding: 10px;\n  margin-top: 20px;\n  width: 150px;\n  background-color: #434242;\n  cursor: pointer;\n  font-size: 16px;\n  border: none;\n  user-select: none;\n  color: #f3efe0;\n}\n\nbutton:hover {\n  background-color: #22a39f;\n  color: #f3efe0;\n}\n\n@media screen and (max-width: 768px) {\n  .leaderboard {\n    flex-direction: column;\n    align-items: center;\n  }\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;EACV,uBAAuB;EACvB,yBAAyB;EACzB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,eAAe;EACf,YAAY;EACZ,yBAAyB;EACzB,WAAW;EACX,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,YAAY;EACZ,yBAAyB;EACzB,eAAe;EACf,eAAe;EACf,YAAY;EACZ,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE;IACE,sBAAsB;IACtB,mBAAmB;EACrB;AACF",sourcesContent:["html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n  background-color: #f3efe0;\n  color: #222;\n  height: 100%;\n}\n\n.leaderboard-heading {\n  text-align: center;\n  margin: 0;\n  padding-top: 30px;\n}\n\n.leaderboard {\n  margin: 50px;\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.recent-heading-and-button {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.recent-heading {\n  margin-right: 50px;\n}\n\n.refresh-button {\n  cursor: pointer;\n}\n\n.recent-scores-list {\n  list-style: none;\n  border: 1px solid #a27b5c;\n  width: 100%;\n  padding: 0;\n}\n\n.recent-score {\n  padding: 10px;\n}\n\n.recent-score:nth-child(even) {\n  background-color: #22a39f;\n}\n\n.form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 50px;\n}\n\ninput {\n  margin: 5px;\n  padding: 10px;\n  font-size: 16px;\n  border: none;\n  background-color: #e6ddb3;\n  color: #222;\n  border-bottom: 1px solid #fff0;\n}\n\ninput:focus {\n  outline: none;\n  border-bottom: 1px solid #22a39f;\n}\n\nbutton {\n  padding: 10px;\n  margin-top: 20px;\n  width: 150px;\n  background-color: #434242;\n  cursor: pointer;\n  font-size: 16px;\n  border: none;\n  user-select: none;\n  color: #f3efe0;\n}\n\nbutton:hover {\n  background-color: #22a39f;\n  color: #f3efe0;\n}\n\n@media screen and (max-width: 768px) {\n  .leaderboard {\n    flex-direction: column;\n    align-items: center;\n  }\n}\n"],sourceRoot:""}]);const i=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);r&&c[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},c=[],i=0;i<n.length;i++){var s=n[i],A=r.base?s[0]+r.base:s[0],d=a[A]||0,l="".concat(A," ").concat(d);a[A]=d+1;var u=t(l),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=o(p,r);r.byIndex=i,e.splice(i,0,{identifier:l,updater:f,references:1})}c.push(l)}return c}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var c=0;c<a.length;c++){var i=t(a[c]);e[i].references--}for(var s=r(n,o),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),c=t.n(a),i=t(565),s=t.n(i),A=t(216),d=t.n(A),l=t(589),u=t.n(l),p=t(426),f={};f.styleTagTransform=u(),f.setAttributes=s(),f.insert=c().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const m="https://us-central1-js-capstone-backend.cloudfunctions.net/api/",E="87OPAjtKd5z1TGXZZ9dx",g=document.querySelector(".recent-scores-list"),C=document.querySelector('input[name="name"]'),b=document.querySelector('input[name="score"]'),h=async()=>{const n=await(async()=>{const n=await fetch(`${m}games/${E}/scores/`);return await n.json()})();g.innerHTML="",n.result.forEach((n=>{const e=document.createElement("li");e.classList.add("recent-score"),e.innerHTML=`${n.user}: ${n.score}`,g.appendChild(e)})),C.value="",b.value=""},y=document.querySelector('input[name="name"]'),B=document.querySelector('input[name="score"]'),v=document.querySelector(".submit-button"),x=document.querySelector(".refresh-button");v.addEventListener("click",(async n=>{n.preventDefault();const e=y.value,t=B.value;await(async(n,e)=>{const t=await fetch(`${m}games/${E}/scores/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:n,score:e})});return await t.json()})(e,t),h()})),x.addEventListener("click",(n=>{n.preventDefault(),h()})),h()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,